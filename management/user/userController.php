<?php 
require_once '/var/www/html/database/dbconnect.php';
require_once '/var/www/html/security/security.php';
require_once '/var/www/html/management/managementLibrary.php';
secure();

/* Security note
 * currently we use the common db connection. In the future it may be wise to use a seperate
 * DB account for this admin work. Currently, this is the only activity that would allow for 
 * UPDATE and DELETE rights
 */

/* possible inputs from form
 * reset,remove,update,create
 * for all actions check for the id,
 * 	if its not set it is a create action
 * 	if it is set, but it doesn't match existing, return an error
 * 	if it is set and matches, continue the update
 *
 * Password Reset
 * 	New Pass is generate in the client and sent to the server
 * 		Set in the hidden element
 * 	Password is generated in crypto and entered into the db
 * 	Notify client on success but don't return the hash.
 *
 * Update
 * 	Username, level and location are check for validity and entered into db
 * 	Password is left unchanged
 *
 * Remove
 * 	User is removed from the table
 * 	This functionality may be removed
 * 
 * Create
 * 	Password is generated by client
 * 	All values are checked and stored as a new user  
 */

// ID Checking


if(!usageUser()){
    die();
}

switch($_POST['submit']){

    case "password":
        //Check for a password and make sure its not null
        if (!isset($_POST['password']) || (strlen($_POST['password']) <= 0)) {
        die("Invalid Usage");
        }
        $iduser = htmlspecialchars($_POST['iduser']);
        $pass = $_POST['password'];
        $hash = password_hash($pass, PASSWORD_DEFAULT);

        if (!updatePassword($con, $hash, $iduser)) {
            echo "Error Updating Password";
        } else {
            echo "Setting $pass as new password.";
        }
        break;

    case "update":
        $iduser = htmlspecialchars($_POST['iduser']);
        $username = htmlspecialchars($_POST['username']);
        $location = htmlspecialchars($_POST['location']);
        $group = htmlspecialchars($_POST['group']);
        $level = htmlspecialchars($_POST['level']);
        if (!updateUser($con, $username, $level, $group, $location, $iduser)) {
            echo "Error Updating User";
        } else {
            echo "User Update Saved";
        }
        break;

    case "remove":
        $iduser = htmlspecialchars($_POST['iduser']);
        if(!removeUser($con, $iduser)){
            echo "Error Removing User";
        } else {
            echo "User Removed";
        }
        break;

    case "create":
        //make sure an ID does not exist in the submission
        if (isset($_POST['iduser'])) {
            die("Invalid Usage");
        }
        $username = htmlspecialchars($_POST['username']);
        $location = htmlspecialchars($_POST['location']);
        $group = htmlspecialchars($_POST['group']);
        $level = htmlspecialchars($_POST['level']);
        $pass = $_POST['password'];
        $hash = password_hash($pass, PASSWORD_DEFAULT);
        if (!insertUser($con, $username, $level, $hash, $group, $location)) {
            echo "Error Inserting User";
        } else {
            echo "User $username Created with Password $pass";
        }
        break;

    default:
        die("Invalid Usage");
        break;
}

